project ( lua C )

# Easen warnings
string(REGEX REPLACE "( |^)/W[0-9]( |$)" "\\1/W2\\2" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
string(REGEX REPLACE "( |^)/W[0-9]( |$)" "\\1/W2\\2" CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")

set(LUA_FOLDER_NAME "lua-5.1.5")

set(LUA_SOURCE_FOLDER "${CMAKE_CURRENT_SOURCE_DIR}/${LUA_FOLDER_NAME}/src")

file(GLOB LOCAL_SOURCES_H ${LUA_SOURCE_FOLDER}/*.h)
file(GLOB LOCAL_SOURCES_C ${LUA_SOURCE_FOLDER}/*.c)
list(REMOVE_ITEM LOCAL_SOURCES_C ${LUA_SOURCE_FOLDER}/lua.c)
list(REMOVE_ITEM LOCAL_SOURCES_C ${LUA_SOURCE_FOLDER}/luac.c)

if (LUA_STATIC)
  add_library(lualib STATIC ${LOCAL_SOURCES_H} ${LOCAL_SOURCES_C})
else()
  add_library(lualib SHARED ${LOCAL_SOURCES_H} ${LOCAL_SOURCES_C})
  set_property(TARGET lualib PROPERTY POSITION_INDEPENDENT_CODE ON)
endif()
add_library(lualib_static STATIC ${LOCAL_SOURCES_H} ${LOCAL_SOURCES_C})
set_target_properties(lualib PROPERTIES LINKER_LANGUAGE C)
set_target_properties(lualib_static PROPERTIES LINKER_LANGUAGE C)
target_include_directories(lualib PUBLIC "${LUA_SOURCE_FOLDER}" "${CMAKE_CURRENT_SOURCE_DIR}")
target_include_directories(lualib_static PUBLIC "${LUA_SOURCE_FOLDER}" "${CMAKE_CURRENT_SOURCE_DIR}")
if (WIN32)
  set_target_properties(lualib PROPERTIES OUTPUT_NAME lua51)
  install(TARGETS lualib DESTINATION "${CMAKE_INSTALL_PREFIX}")
  install(FILES $<TARGET_PDB_FILE:lualib> DESTINATION "${CMAKE_INSTALL_PREFIX}" OPTIONAL)
  # set_target_properties(lualib PROPERTIES PUBLIC_HEADER "${LOCAL_SOURCES_H};${CMAKE_CURRENT_SOURCE_DIR}/lua.hpp")
  # install(TARGETS lualib PUBLIC_HEADER DESTINATION "${CMAKE_INSTALL_PREFIX}/include")
  # set_target_properties(lualib_static PROPERTIES OUTPUT_NAME lua51_static)
  # install(TARGETS lualib_static DESTINATION "${CMAKE_INSTALL_PREFIX}")
else()
  set_target_properties(lualib PROPERTIES PUBLIC_HEADER "${LOCAL_SOURCES_H};${CMAKE_CURRENT_SOURCE_DIR}/lua.hpp")
  install(TARGETS lualib
      DESTINATION "${CMAKE_INSTALL_PREFIX}/lib"
      PUBLIC_HEADER DESTINATION "${CMAKE_INSTALL_PREFIX}/include"
  )
  install(TARGETS lualib_static DESTINATION "${CMAKE_INSTALL_PREFIX}/lib")
endif()
if (WIN32)
  target_compile_definitions(lualib PRIVATE _CRT_SECURE_NO_WARNINGS)
  target_compile_definitions(lualib_static PRIVATE _CRT_SECURE_NO_WARNINGS)
  if (NOT LUA_STATIC)
    target_compile_definitions(lualib PRIVATE LUA_BUILD_AS_DLL)
  endif()
elseif (UNIX)
  target_compile_definitions(lualib PRIVATE LUA_USE_LINUX)
  target_link_libraries(lualib ${CMAKE_DL_LIBS} m)
  target_compile_definitions(lualib_static PRIVATE LUA_USE_LINUX)
  target_link_libraries(lualib_static ${CMAKE_DL_LIBS} m)
  set_target_properties(lualib PROPERTIES OUTPUT_NAME lua51)
  set_target_properties(lualib_static PROPERTIES OUTPUT_NAME lua51)
elseif (APPLE)
  target_compile_definitions(lualib PRIVATE LUA_USE_MACOSX)
  target_compile_definitions(lualib_static PRIVATE LUA_USE_MACOSX)
endif()

add_executable(lua_interpreter ${LUA_SOURCE_FOLDER}/lua.c)
target_link_libraries(lua_interpreter lualib_static)
target_compile_definitions(lua_interpreter PRIVATE _CRT_SECURE_NO_WARNINGS)
set_target_properties(lua_interpreter PROPERTIES OUTPUT_NAME lua_51)
if (WIN32)
  install(TARGETS lua_interpreter DESTINATION "${CMAKE_INSTALL_PREFIX}")
  install(FILES $<TARGET_PDB_FILE:lua_interpreter> DESTINATION "${CMAKE_INSTALL_PREFIX}" OPTIONAL)
else()
  install(TARGETS lua_interpreter DESTINATION "${CMAKE_INSTALL_PREFIX}/bin")
endif()
#install(TARGETS lualib
#    DESTINATION "${CMAKE_INSTALL_PREFIX}"
    # LIBRARY DESTINATION "${CMAKE_INSTALL_PREFIX}/lua/lib"
    # RUNTIME DESTINATION "${CMAKE_INSTALL_PREFIX}/lua/lib"
    # ARCHIVE DESTINATION "${CMAKE_INSTALL_PREFIX}/lua/lib"
#)

add_executable(lua_compiler ${LUA_SOURCE_FOLDER}/luac.c)
target_link_libraries(lua_compiler lualib_static)
target_compile_definitions(lua_compiler PRIVATE _CRT_SECURE_NO_WARNINGS)
set_target_properties(lua_compiler PROPERTIES OUTPUT_NAME luac_51)
if (WIN32)
  install(TARGETS lua_compiler DESTINATION "${CMAKE_INSTALL_PREFIX}")
  install(FILES $<TARGET_PDB_FILE:lua_compiler> DESTINATION "${CMAKE_INSTALL_PREFIX}" OPTIONAL)
else()
  install(TARGETS lua_compiler DESTINATION "${CMAKE_INSTALL_PREFIX}/bin")
endif()
